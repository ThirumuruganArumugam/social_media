@startuml CreatePostScreen-Sequence-Pseudo

!define POSITIVERESPONSE 90EE90
!define NEGATIVEERESPONSE EFBBBB
!define NUETRALRESPONSE F2DC79

skinparam sequence{
    ParticipantBackgroundColor #A7BEAE
    LifeLineBackgroundColor #E7E8D1
    LifeLineBorderColor #2C5F2D
    ActorBackgroundColor #FC766AFF
    ActorBorderColor #FC766AFF
    ArrowColor #B85042
    ArrowFontColor #234E70
}

title   **CreatePostScreen - initState()**
autonumber 1
hide footbox
User -> CreatePostScreen: Invoke **initState()**
activate User
activate CreatePostScreen
alt #POSITIVERESPONSE (TRY)
    CreatePostScreen -> CreatePostScreenVM : Invoke **createNewPosts()**
    activate CreatePostScreenVM
    CreatePostScreenVM --> CreatePostScreen : Returns
    deactivate CreatePostScreenVM
    alt #NUETRALRESPONSE (if @isLoading is true)
        CreatePostScreen --> User : Display Loading view
    end
    CreatePostScreen --> User : Returns List of Posts from **@tempListOfPosts**

    CreatePostScreen -> CreatePostScreen: Add a listener to the navigationStream and listen to the events

    alt #POSITIVERESPONSE IF (event is NavigatorPush)
        CreatePostScreen-> CreatePostScreen: Push the context to the **Response**\n**Screen** and data as **statuscode**.
        CreatePostScreen --> User: Returnss
    else #POSITIVERESPONSE IF (event is NavigatorPop) 
        CreatePostScreen-> CreatePostScreen: Pop the context to the **Landing Screen**.
        CreatePostScreen --> User: Returnss
    end

    CreatePostScreen -> CreatePostScreen: Add a listener to the textfieldcontroller.Stream and listen to the events

    alt #POSITIVERESPONSE event is TitleText
        CreatePostScreen-> CreatePostScreen: Assign the event data to the text editing controller.
        CreatePostScreen --> User: Returnss
    end

    CreatePostScreen -> CreatePostScreen: Add a listener to the textfieldcontroller.Stream and listen to the events

    alt #POSITIVERESPONSE event is DescriptionText
        CreatePostScreen-> CreatePostScreen: Assign the event data to the text editing controller.
        CreatePostScreen --> User: Returnss
    end

else #NEGATIVEERESPONSE (CATCH)
    CreatePostScreen -> CreatePostScreen : Write exception logs
    CreatePostScreen --> User: Returns
    deactivate CreatePostScreen
    deactivate User
end

==Pseudocode==
hnote across
**TRY**
    
        INVOKE **createNewPosts()** using the **CreatePostScreenVM** instance
        
        **IF isLoading is true**

                DISPLAY the loading view

        **IF @isError is true**

                DISPLAY the **@errorMessage**
        
        DISPLAY the user list from **@tempListOfPosts**

        Add a listener to the **navigationStream** and listen to the **events**
        
        **EVENT is NavigatorPush**

                Push the context to the **ResponseScreen** with data as **status code**
        
        **EVENT is NavigatorPop**

                Pop the context to the **LandingScreen Screen**
        
        Add a listener to the **textfieldcontroller** and listen to the **events**
    
        **EVENT is TitleText**

                Assign the event data to the controller
        
        Add a listener to the **textfieldcontroller** and listen to the **events**
    
        **EVENT is DescriptionText**

                Assign the event data to the controller

**CATCH**

    INVOKE **writeException()** on the exception object ex.

end note


newpage  **CreatePostScreen - dispose()**
!define POSITIVERESPONSE 90EE90
!define NEGATIVEERESPONSE EFBBBB
!define NUETRALRESPONSE F2DC79

skinparam sequence{
    ParticipantBackgroundColor #A7BEAE
    LifeLineBackgroundColor #E7E8D1
    LifeLineBorderColor #2C5F2D
    ActorBackgroundColor #FC766AFF
    ActorBorderColor #FC766AFF
    ArrowColor #B85042
    ArrowFontColor #234E70
}

autonumber 1
hide footbox
User -> CreatePostScreen: Invokes **dispose()**
activate User
activate CreatePostScreen
CreatePostScreen -> CreatePostScreen: Dispose the **navigationStream Controller**
CreatePostScreen -> CreatePostScreen: Dispose the **texteditingcontroller** for **title**.
CreatePostScreen -> CreatePostScreen: Dispose the **texteditingcontroller** for **description**.
CreatePostScreen --> User: Returnss
deactivate CreatePostScreen
deactivate User

==Pseudocode==
hnote across

INVOKE **dispose()** method

USING **.dispose()** method dispose the **navigationStream Controller**

USING **.dispose()** method dispose the **texteditingcontroller** for the **title**

USING **.dispose()** method dispose the **texteditingcontroller** for the **description** 

end note
@enduml